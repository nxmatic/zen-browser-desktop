name: Linux Release Build
on:
  workflow_dispatch:
    inputs:
      gha-runner-label:
        description: 'GitHub runner label on which performing the jobs'
        required: false
        default: 'ubuntu-latest'
        type: string
      brand:
        description: 'The brand to build'
        default: ""
        type: string
      display-version:
        description: 'The display version to build'
        default: "0.0.0-dev"
        type: string

jobs:
  build-linux:
    
    permissions:
      contents: write
    runs-on:
      - ${{ github.event.inputs.gha-runner-label || ( github.repository_owner == github.actor && 'self-hosted' ) || 'ubuntu-latest' }}
    strategy:
      fail-fast: false
    name: Build Linux - aarch64
    steps:
      - name: Check system architecture
        run: |
          if [ "$(uname -m)" != "aarch64" ]; then
            echo "Error: This workflow is intended to run on aarch64 architecture, but current architecture is $arch"
            exit 1
          fi
          cat <<EOF
          Architecture: $(uname -m)"
          Kernel: $(uname -r)"
          OS: $(lsb_release -d | cut -f2)"
          CPU Info:
          $(lscpu)
          EOF

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
         node-version: 20

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup git
        run: |
          git config --global user.email "mauro-balades@users.noreply.github.com"
          git config --global user.name "mauro-balades"

      - name: Install system dependencies
        run: |
          curl -o /dev/stdout https://apt.llvm.org/llvm.sh | 
            sudo bash
          sudo apt-get -y update --fix-missing
          sudo apt-get -y update
          sudo apt-get -y install dos2unix yasm build-essential libgtk2.0-dev libpython3-dev m4 uuid libasound2-dev libcurl4-openssl-dev libdbus-1-dev libdrm-dev libdbus-glib-1-dev libdbus-glib-1-dev libgtk-3-dev libpulse-dev libx11-xcb-dev libxt-dev xvfb pkgconf pkgconf-bin clang llvm libclang-dev libclang-cpp-dev libclang-rt-18-dev-wasm32

      - name: Setup cargo
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | bash -s -- -y
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"

      - name: Install additional rust applications
        run: |
          cargo install --force cbindgen
          
      - name: Configure sccache
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Install sccache
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: 0.2.13
        run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Save sccache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: /home/runner/.cache/sccache
          key: ${{ runner.os }}-sccache

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: pnpm install

      - name: Load surfer CI setup
        run: pnpm surfer ci --brand ${BRAND} --display-version ${VERSION}
        env:
          BRAND: ${{ inputs.release-branch || inputs.brand || 'alpha' }}
          VERSION: ${{ inputs.build-version || inputs.display-version || '0.0.0-dev' }}

      - name: Download firefox source and dependencies
        run: pnpm surfer download

      - name: Import
        run: pnpm surfer import

      - name: Build language packs
        run: sh scripts/download-language-packs.sh

      - name: Bootstrap
        run: |
          cd engine
          ./mach --no-interactive bootstrap --application-choice browser
          cd ..

      - name: Build
        continue-on-error: true
        run: sh .github/workflows/src/release-build.sh

      - name: Build again if it failed
        if: failure()
        run: sh .github/workflows/src/release-build.sh

      - name: Package
        run: pnpm package

      - name: Rename artifacts
        run: |
          mv dist/zen-*.tar.bz2 "zen.linux-aarch64.tar.bz2"
          mv dist/output.mar linux-aarch64.mar

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: zen.linux-aarch64.tar.bz2
          path: ./zen.linux-aarch64.tar.bz2

      - name: Upload mar
        uses: actions/upload-artifact@v4
        with:
          name: linux-aarch64.mar
          path: ./linux-aarch64.mar

      - name: Upload update manifests
        uses: actions/upload-artifact@v4
        with:
          name: linux_update_manifest_aarch64
          path: ./dist/update

      - name: release-github
        uses: 'marvinpinto/action-automatic-releases@latest'
        if: ${{ inputs.update_branch == 'alpha' }}
        with:
          repo_token: '${{ secrets.DEPLOY_KEY }}'
          automatic_release_tag: ${{ needs.build-data.outputs.version }}
          prerelease: true
          title: 'Alpha build - ${{ needs.build-data.outputs.version }} (${{ needs.build-data.outputs.build_date }})'
          files: |
            zen.source.tar.gz
            zen.linux-aarch64.tar.bz2
            linux.mar
            linux-generic.mar
